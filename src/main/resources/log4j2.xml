<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!-- status log4j2内部日志级别
    monitorInterval:每隔多少秒重新加载日志配置文件，无需重启项目修改日志配置文件相关参数
-->
<configuration status="INFO" monitorInterval="60">
    <!-- 全局参数 -->
    <Properties>
        <!--日志输出路径-->
        <Property name="LOG_HOME">f:/logs</Property>
        <Property name="FILE_NAME">logBylog4j2</Property>
        <!--日志输出格式-->
        <Property name="pattern">%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %c{1}:%L -%m%n</Property>
        <!--显示名称-->
        <Property name="displayName">log4j2demo</Property>
    </Properties>
    <!--输出源，定义日志输出的地方
        包括控制台Console、日志文件File、滚动日志文件RollingFile、MongoDB、flume
    -->
    <Appenders>
        <!--控制台输出
            name:别名
        -->
        <Console name="console" target="SYSTEM_OUT" follow="true">
            <!--输出格式-->
            <PatternLayout>
                <pattern>${pattern}</pattern>
            </PatternLayout>
        </Console>

        <!-- 日志存储文件 每次运行程序会自动清空，由append属性决定 -->
        <File name="error" fileName="${LOG_HOME}/${FILE_NAME}.log" append="false">
            <!-- 指定日志等级过滤器级别
                onMatch:匹配level以上级别
                onMismatch:匹配level以下级别
                属性配置值(ACCEPT:接受,DENY:拒绝,NEUTRAL:中立)
             -->
            <ThresholdFilter level="ERROR" onMatch="ACCEPT"
                             onMismatch="DENY" />
            <!--输出格式-->
            <PatternLayout>
                <pattern>${pattern}</pattern>
            </PatternLayout>
        </File>
        <!-- 滚动文件
            文件大小超过SizeBasedTriggeringPolicy定义的size后重新生成日志存储文件
            fileName:初次触发时日志文件名
            filePattern:达到指定大小后重新生成日志的文件命名规则
         -->
        <RollingFile name="rollingFile" fileName="${displayName}.log"
                     filePattern="${displayName}_%d{yyyy-MM-dd}.log">
            <PatternLayout>
                <pattern>${pattern}</pattern>
            </PatternLayout>
            <!-- 按大小划分 -->
            <SizeBasedTriggeringPolicy size="50 MB" />
        </RollingFile>

    </Appenders>
    <!--日志配置器
        分为根日志配置器Root和自定义日志配置器
        根据自定义日志配置器的name属性（通常为包名）获取不到自定义日志配置器时，默认使用根日志配置器
    -->
    <Loggers>
        <!-- <Logger name="org.apache.catalina.util.LifecycleBase" level="ERROR"
            /> <Logger name="org.apache.coyote.http11.Http11NioProtocol" level="WARN"
            /> <Logger name="org.apache.tomcat.util.net.NioSelectorPool" level="WARN"
            /> -->
        <!--自定义日志器
            name:自定义日志器别名（等同于包名）
            level:日志级别
            此处为springframework下第三方类库日志级别为WARN
        -->
        <Logger name="org.springframework" level="WARN" />
        <!--自定义日志器
            name:自定义日志器别名(等同于包名)
            level:日志级别
            此处为springboot示例项目下日志级别为DEBUG
        -->
        <Logger name="com.springboot.demo" level="DEBUG" />
        <!--根日志配置器-->
        <Root level="DEBUG">
            <!--配置根日志器输出源-->
            <AppenderRef ref="console"></AppenderRef>
            <AppenderRef ref="error"></AppenderRef>
            <AppenderRef ref="rollingFile"></AppenderRef>
        </Root>
    </Loggers>
</configuration>
